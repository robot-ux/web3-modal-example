{"version":3,"file":"static/js/main.fe17bcf8.js","mappings":"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","sources":["../node_modules/@binance-chain/javascript-sdk/lib/ledger|sync","web3-modal/constant.tsx","web3-modal/index.tsx","test-bcw/index.tsx","App.tsx"],"sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 36757;\nmodule.exports = webpackEmptyContext;","export const CHAIN_IDS_MAPPING = {\n  '0x1': 'eth-mainnet',\n  '0x3': 'ropsten-testnet',\n  '0x61': 'bsc-testnet',\n  '0x38': 'bsc-mainnet',\n};\n","import Web3Modal from '@actool/web3modal';\nimport Web3 from 'web3';\nimport { useEffect, useState, useCallback } from 'react';\nimport { CHAIN_IDS_MAPPING } from './constant';\n\nconst providerOptions = () => ({\n  binancewallet: {\n    package: (window as any).BinanceChain,\n  },\n  metamask: {\n    package: (window as any).ethereum,\n  },\n});\n\nconst getWeb3Modal = () => {\n  const web3modal = new Web3Modal({\n    providerOptions: providerOptions(),\n    cacheProvider: true,\n  });\n  return web3modal;\n};\n\nexport const ConnectButtons = () => {\n  const [web3modal, setWeb3modal] = useState({} as Web3Modal);\n  const [result, setResult] = useState({});\n  const [web3, setWeb3] = useState({} as Web3);\n  const [network, setNetwork] = useState({});\n  const [account, setAccount] = useState('');\n\n  useEffect(() => {\n    setWeb3modal(getWeb3Modal());\n  }, []);\n\n  // auto connect.\n  useEffect(() => {\n    if (web3modal.cachedProvider) {\n      handleConnect();\n    }\n  }, [web3modal]);\n\n  const handleConnect = useCallback(async () => {\n    const provider = await web3modal.connect();\n    const _web3 = new Web3(provider);\n\n    // get chainId\n    // const chainId = await _web3.eth.getChainId();\n    const chainId = await provider.request({ method: 'eth_chainId' });\n    const setChainId = (_chainId: number) => {\n      const hex = _web3.utils.toHex(_chainId || 'unknown');\n      setNetwork({\n        chainId: Number(_chainId),\n        hex,\n        name: CHAIN_IDS_MAPPING[hex as '0x1'],\n      });\n    };\n    setChainId(chainId);\n\n    // Subscribe to chainId change\n    provider.on('chainChanged', (_chainId: number) => {\n      setChainId(_chainId);\n    });\n\n    const accounts = await _web3.eth.getAccounts();\n    setResult({ accounts });\n    setWeb3(_web3);\n    setAccount(accounts[0]);\n\n    // Subscribe to accounts change\n    provider.on('accountsChanged', (_accounts: string[]) => {\n      setAccount(_accounts[0]);\n    });\n  }, [web3modal]);\n\n  // re-connect\n  const handleReconnect = useCallback(async () => {\n    if (!web3.eth) {\n      setResult({ error: 'Please click connect first' });\n      return;\n    }\n\n    await web3modal.reconnect();\n    window.location.reload();\n  }, [web3]);\n\n  // eth_sign\n  const handleSign = useCallback(async () => {\n    if (!web3.eth) {\n      setResult({ error: 'Please click connect first' });\n      return;\n    }\n    const unhashMsg = 'ABC';\n    const msg = web3.utils.keccak256(unhashMsg);\n\n    try {\n      const signature = await web3.eth.sign(msg, account);\n      setResult({ signature });\n    } catch (error) {\n      console.info(error);\n    }\n  }, [web3, account]);\n\n  // personal_sign\n  const handlePersonalSign = useCallback(async () => {\n    if (!web3.eth) {\n      setResult({ error: 'Please click connect first' });\n      return;\n    }\n\n    const unhashMsg = 'ABC';\n\n    try {\n      const signature = await web3.eth.personal.sign(unhashMsg, account, '');\n      setResult({ signature });\n    } catch (error) {\n      console.info(error);\n    }\n  }, [web3, account]);\n\n  // eth_sendTransaction\n  const handleSendTx = useCallback(async () => {\n    if (!web3.eth) {\n      setResult({ error: 'Please click connect first' });\n      return;\n    }\n\n    try {\n      const tx = await web3.eth.sendTransaction({\n        to: account,\n        from: account,\n        value: 0.001 * 1e18,\n      });\n      setResult(tx);\n    } catch (error) {\n      console.info(error);\n    }\n  }, [web3, account]);\n\n  // clear connect\n  const handleDisconnect = useCallback(() => {\n    if (!web3.eth) {\n      setResult({ error: 'Please click connect first' });\n      return;\n    }\n\n    web3modal.disconnect();\n    setResult({});\n    setWeb3({} as Web3);\n  }, [web3]);\n\n  return (\n    <div>\n      <div>\n        <div>Extension: {web3modal.cachedProvider}</div>\n        <div className=\"network\">Network: {JSON.stringify(network)}</div>\n        <div className=\"network\">Account: {account}</div>\n        <div className=\"display-panel\">{JSON.stringify(result, null, 2)}</div>\n      </div>\n      <div>\n        <button type=\"button\" onClick={handleDisconnect}>\n          DisConnect\n        </button>\n        <button\n          type=\"button\"\n          onClick={web3modal.cachedProvider ? handleReconnect : handleConnect}>\n          Connect\n        </button>\n        <button type=\"button\" onClick={handleSign}>\n          Eth_sign\n        </button>\n        <button type=\"button\" onClick={handlePersonalSign}>\n          Personal_sign\n        </button>\n        <button type=\"button\" onClick={handleSendTx}>\n          Eth_sendTransaction\n        </button>\n      </div>\n    </div>\n  );\n};\n","import {\n  INetwork,\n  prepareToSwap,\n  changeInAmount,\n  checkApprovalBeforeSwap,\n} from '@binance-chain/tx';\n\nexport const TestBcw = () => {\n  const handleSend = async () => {\n    const IN_ASSET = {\n      decimals: 6,\n      networkSymbol: 'USDT',\n      contractAddress: '0xdac17f958d2ee523a2206206994597c13d831ec7',\n    };\n    const OUT_ASSET = {\n      decimals: 18,\n      networkSymbol: '1INCH',\n      contractAddress: '0x111111111117dc0aa78b770fa6a738034120c302',\n    };\n    const BEW_SWAP_CONTRACT = '0x967280A833bd1924C58c61C2d0dFe2D772c37178';\n    const SLIPPAGE = '0.01';\n    const BEW_SWAP_FEE = '0.01'; // 1%\n    const ROUTERS = [\n      {\n        type: 'uniswap',\n        address: '0x7a250d5630b4cf539739df2c5dacb4c659f2488d',\n      },\n    ];\n    const BSC_ACCOUNT = {\n      address: '0xFf21ddc5b114a5E4F1ee813180276dDdE7160C73',\n      privateKey: '',\n    };\n    const ETH_MAINNET_NETWORK: INetwork = {\n      id: 'eth-mainnet',\n      url: 'https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161',\n    };\n\n    const txData = {\n      network: ETH_MAINNET_NETWORK,\n      amount: '1',\n      inAsset: IN_ASSET,\n      outAsset: OUT_ASSET,\n      routers: ROUTERS,\n    };\n    const { quotes, path } = await changeInAmount(txData as any);\n    const quote1 = quotes[0];\n    console.log('quotes: ', quotes);\n    console.log('paths: ', path);\n\n    // approval\n    const { needApproval, buildApproval } = await checkApprovalBeforeSwap({\n      network: ETH_MAINNET_NETWORK,\n      asset: IN_ASSET,\n      allowance: quote1.inAmount,\n      from: BSC_ACCOUNT.address,\n      spenderAddress: BEW_SWAP_CONTRACT,\n    });\n    if (needApproval) {\n      const { sign, send: sendApproval } = await buildApproval();\n      await sendApproval(sign(BSC_ACCOUNT.privateKey));\n    }\n\n    // swap\n    const {\n      fee,\n      sign,\n      send: swap,\n    } = await prepareToSwap({\n      network: ETH_MAINNET_NETWORK,\n      from: BSC_ACCOUNT.address,\n      inAmount: quote1.inAmount,\n      inAsset: IN_ASSET,\n      outAsset: OUT_ASSET,\n      // Need to reduce slippage.\n      outAmount: (\n        Number(quote1.outAmount) *\n        (1 - Number(SLIPPAGE) - Number(BEW_SWAP_FEE))\n      ).toString(),\n      type: 'EXACT_INPUT',\n      timeout: 1200,\n      config: {\n        swapContract: BEW_SWAP_CONTRACT,\n        routerContract: ROUTERS[0].address,\n        path,\n      },\n    });\n\n    console.log({ fee });\n    // const result = await swap(sign(BSC_ACCOUNT.privateKey));\n    // console.log(result);\n  };\n\n  return (\n    <button onClick={handleSend} type=\"button\">\n      send\n    </button>\n  );\n};\n","import { Switch, Route } from '@modern-js/runtime/router';\n\nimport { ConnectButtons } from './web3-modal';\nimport { TestBcw } from './test-bcw';\nimport './App.css';\n\nconst App = () => (\n  <Switch>\n    <Route exact={true} path=\"/\">\n      <div className=\"container\">\n        <h2 className=\"description\">\n          Web3 Modal Test (\n          <a href=\"https://github.com/robot-ux/web3-modal-example\">Github</a>)\n        </h2>\n        <div className=\"grid\">\n          <ConnectButtons />\n        </div>\n      </div>\n    </Route>\n    <Route exact={true} path=\"/test-bcw\">\n      <TestBcw />\n    </Route>\n    <Route path=\"*\">\n      <div>404</div>\n    </Route>\n  </Switch>\n);\n\nexport default App;\n"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","id","module","exports","CHAIN_IDS_MAPPING","ConnectButtons","useState","web3modal","setWeb3modal","result","setResult","web3","setWeb3","network","setNetwork","account","setAccount","useEffect","Web3Modal","providerOptions","binancewallet","package","window","BinanceChain","metamask","ethereum","cacheProvider","cachedProvider","handleConnect","useCallback","connect","provider","_web3","Web3","request","method","chainId","setChainId","_chainId","hex","utils","toHex","Number","name","on","eth","getAccounts","accounts","_accounts","handleReconnect","error","reconnect","location","reload","handleSign","msg","keccak256","sign","signature","console","info","handlePersonalSign","personal","handleSendTx","sendTransaction","to","from","value","tx","handleDisconnect","disconnect","className","JSON","stringify","type","onClick","TestBcw","handleSend","BEW_SWAP_CONTRACT","SLIPPAGE","BEW_SWAP_FEE","BSC_ACCOUNT","address","privateKey","txData","ETH_MAINNET_NETWORK","url","amount","inAsset","IN_ASSET","decimals","networkSymbol","contractAddress","outAsset","OUT_ASSET","routers","ROUTERS","changeInAmount","quotes","path","quote1","log","checkApprovalBeforeSwap","asset","allowance","inAmount","spenderAddress","needApproval","buildApproval","sendApproval","send","prepareToSwap","outAmount","toString","timeout","config","swapContract","routerContract","fee","exact","href"],"sourceRoot":""}