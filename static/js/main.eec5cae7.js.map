{"version":3,"file":"static/js/main.eec5cae7.js","mappings":"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","sources":["web3-modal/constant.tsx","web3-modal/index.tsx","App.tsx"],"sourcesContent":["export const CHAIN_IDS_MAPPING = {\n  '0x01': 'eth-mainnet',\n  '0x03': 'ropsten-testnet',\n  '0x61': 'bsc-testnet',\n  '0x38': 'bsc-mainnet',\n};\n","import Web3Modal from 'web3modal';\nimport Web3 from 'web3';\nimport { useEffect, useState, useCallback } from 'react';\nimport { CHAIN_IDS_MAPPING } from './constant';\n\nconst providerOptions = () => ({\n  'custom-binancewallet': {\n    display: {\n      logo: 'https://dex-bin.bnbstatic.com/static/images/icon_dex.svg',\n      name: 'Binance Wallet',\n      description: 'Connect to your Binance Wallet',\n    },\n    package: (window as any).BinanceChain,\n    connector: async (provider: any) => {\n      await provider.enable();\n      return provider;\n    },\n  },\n});\n\nconst getWeb3Modal = () => {\n  const web3modal = new Web3Modal({\n    network: 'testnet',\n    providerOptions: providerOptions(),\n    cacheProvider: true,\n    // disableInjectedProvider: true,\n    theme: {\n      background: 'rgb(39, 49, 56)',\n      main: 'rgb(199, 199, 199)',\n      secondary: 'rgb(136, 136, 136)',\n      border: 'rgba(195, 195, 195, 0.14)',\n      hover: 'rgb(16, 26, 32)',\n    },\n  });\n  return web3modal;\n};\n\nexport const ConnectButtons = () => {\n  const [web3modal, setWeb3modal] = useState({} as Web3Modal);\n  const [result, setResult] = useState({});\n  const [web3, setWeb3] = useState({} as Web3);\n  const [network, setNetwork] = useState({});\n  const [account, setAccount] = useState('');\n\n  useEffect(() => {\n    setWeb3modal(getWeb3Modal());\n  }, []);\n\n  const handleConnect = useCallback(async () => {\n    const provider = await web3modal.connect();\n    const _web3 = new Web3(provider);\n\n    const accounts = await _web3.eth.getAccounts();\n    setResult({ accounts });\n    setWeb3(_web3);\n    setAccount(accounts[0]);\n\n    const chainId = await _web3.eth.getChainId();\n    const setChainId = (_chainId: number) => {\n      const hex = _web3.utils.toHex(_chainId);\n      setNetwork({\n        chainId: _chainId,\n        hex,\n        name: CHAIN_IDS_MAPPING[hex as '0x01'],\n      });\n    };\n    setChainId(chainId);\n\n    // Subscribe to accounts change\n    provider.on('accountsChanged', (_accounts: string[]) => {\n      setAccount(_accounts[0]);\n    });\n\n    // Subscribe to chainId change\n    provider.on('chainChanged', (_chainId: number) => {\n      setChainId(Number(_chainId));\n    });\n  }, [web3modal]);\n\n  // eth_sign\n  const handleSign = useCallback(async () => {\n    if (!web3.eth) {\n      setResult({ error: 'Please click connect first' });\n      return;\n    }\n    const msg =\n      '0x749324f788147326a2d3113d1926fcd82b4fb6f02e0a29b897a2e614dcc40464';\n\n    try {\n      const signature = await web3.eth.sign(msg, account);\n      setResult({ signature });\n    } catch (error) {\n      console.info(error);\n    }\n  }, [web3, account]);\n\n  // personal_sign\n  const handlePersonalSign = useCallback(async () => {\n    if (!web3.eth) {\n      setResult({ error: 'Please click connect first' });\n      return;\n    }\n\n    const msg =\n      '0x749324f788147326a2d3113d1926fcd82b4fb6f02e0a29b897a2e614dcc40464';\n\n    try {\n      const signature = await web3.eth.personal.sign(msg, account, '');\n      setResult({ signature });\n    } catch (error) {\n      console.info(error);\n    }\n  }, [web3, account]);\n\n  // eth_sendTransaction\n  const handleSendTx = useCallback(async () => {\n    if (!web3.eth) {\n      setResult({ error: 'Please click connect first' });\n      return;\n    }\n\n    try {\n      const tx = await web3.eth.sendTransaction({\n        to: account,\n        from: account,\n        value: 0.001 * 1e18,\n      });\n      setResult(tx);\n    } catch (error) {\n      console.info(error);\n    }\n  }, [web3, account]);\n\n  // clear connect\n  const handleClear = async () => {\n    web3modal.clearCachedProvider();\n    setResult({});\n    setWeb3({} as Web3);\n  };\n\n  return (\n    <div>\n      <div>\n        <div className=\"network\">Network: {JSON.stringify(network)}</div>\n        <div className=\"network\">Account: {account}</div>\n        <div className=\"display-panel\">{JSON.stringify(result, null, 2)}</div>\n      </div>\n      <div>\n        <button type=\"button\" onClick={handleClear}>\n          Clear Connect\n        </button>\n        <button type=\"button\" onClick={handleConnect}>\n          Connect\n        </button>\n        <button type=\"button\" onClick={handleSign}>\n          Eth_sign\n        </button>\n        <button type=\"button\" onClick={handlePersonalSign}>\n          Personal_sign\n        </button>\n        <button type=\"button\" onClick={handleSendTx}>\n          Eth_sendTransaction\n        </button>\n      </div>\n    </div>\n  );\n};\n","import { Switch, Route } from '@modern-js/runtime/router';\n\nimport { ConnectButtons } from './web3-modal';\nimport './App.css';\n\nconst App = () => (\n  <Switch>\n    <Route exact={true} path=\"/\">\n      <div className=\"container\">\n        <h2 className=\"description\">Web3 Modal Test</h2>\n        <div className=\"grid\">\n          <ConnectButtons />\n        </div>\n      </div>\n    </Route>\n    <Route path=\"*\">\n      <div>404</div>\n    </Route>\n  </Switch>\n);\n\nexport default App;\n"],"names":["CHAIN_IDS_MAPPING","ConnectButtons","useState","web3modal","setWeb3modal","result","setResult","web3","setWeb3","network","setNetwork","account","setAccount","useEffect","Web3Modal","providerOptions","display","logo","name","description","package","window","BinanceChain","connector","provider","enable","cacheProvider","theme","background","main","secondary","border","hover","getWeb3Modal","handleConnect","useCallback","connect","_web3","Web3","eth","getAccounts","accounts","getChainId","chainId","setChainId","_chainId","hex","utils","toHex","on","_accounts","Number","handleSign","error","sign","signature","console","info","handlePersonalSign","personal","handleSendTx","sendTransaction","to","from","value","tx","handleClear","clearCachedProvider","className","JSON","stringify","type","onClick","exact","path"],"sourceRoot":""}