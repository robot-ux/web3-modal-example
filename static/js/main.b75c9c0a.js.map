{"version":3,"file":"static/js/main.b75c9c0a.js","mappings":"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","sources":["web3-modal/constant.tsx","web3-modal/index.tsx","App.tsx"],"sourcesContent":["export const CHAIN_IDS_MAPPING = {\n  '0x01': 'eth-mainnet',\n  '0x03': 'ropsten-testnet',\n  '0x61': 'bsc-testnet',\n  '0x38': 'bsc-mainnet',\n};\n","import Web3Modal from '@actool/web3modal';\nimport Web3 from 'web3';\nimport { useEffect, useState, useCallback } from 'react';\nimport { CHAIN_IDS_MAPPING } from './constant';\n\nconst providerOptions = () => ({\n  binancewallet: {\n    package: (window as any).BinanceChain,\n  },\n  metamask: {\n    package: (window as any).ethereum,\n  },\n});\n\nconst getWeb3Modal = () => {\n  const web3modal = new Web3Modal({\n    providerOptions: providerOptions(),\n    cacheProvider: true,\n  });\n  return web3modal;\n};\n\nexport const ConnectButtons = () => {\n  const [web3modal, setWeb3modal] = useState({} as Web3Modal);\n  const [result, setResult] = useState({});\n  const [web3, setWeb3] = useState({} as Web3);\n  const [network, setNetwork] = useState({});\n  const [account, setAccount] = useState('');\n\n  useEffect(() => {\n    setWeb3modal(getWeb3Modal());\n  }, []);\n\n  // auto connect.\n  useEffect(() => {\n    if (web3modal.cachedProvider) {\n      handleConnect();\n    }\n  }, [web3modal]);\n\n  const handleConnect = useCallback(async () => {\n    const provider = await web3modal.connect();\n    const _web3 = new Web3(provider);\n\n    // get chainId\n    // const chainId = await _web3.eth.getChainId();\n    const chainId = await provider.request({ method: 'eth_chainId' });\n    const setChainId = (_chainId: number) => {\n      const hex = _web3.utils.toHex(_chainId || 'unknown');\n      setNetwork({\n        chainId: _chainId,\n        hex,\n        name: CHAIN_IDS_MAPPING[hex as '0x01'],\n      });\n    };\n    setChainId(chainId);\n\n    // Subscribe to chainId change\n    provider.on('chainChanged', (_chainId: number) => {\n      setChainId(Number(_chainId));\n    });\n\n    const accounts = await _web3.eth.getAccounts();\n    setResult({ accounts });\n    setWeb3(_web3);\n    setAccount(accounts[0]);\n\n    // Subscribe to accounts change\n    provider.on('accountsChanged', (_accounts: string[]) => {\n      setAccount(_accounts[0]);\n    });\n  }, [web3modal]);\n\n  // eth_sign\n  const handleSign = useCallback(async () => {\n    if (!web3.eth) {\n      setResult({ error: 'Please click connect first' });\n      return;\n    }\n    const msg =\n      '0x749324f788147326a2d3113d1926fcd82b4fb6f02e0a29b897a2e614dcc40464';\n\n    try {\n      const signature = await web3.eth.sign(msg, account);\n      setResult({ signature });\n    } catch (error) {\n      console.info(error);\n    }\n  }, [web3, account]);\n\n  // personal_sign\n  const handlePersonalSign = useCallback(async () => {\n    if (!web3.eth) {\n      setResult({ error: 'Please click connect first' });\n      return;\n    }\n\n    const msg =\n      '0x749324f788147326a2d3113d1926fcd82b4fb6f02e0a29b897a2e614dcc40464';\n\n    try {\n      const signature = await web3.eth.personal.sign(msg, account, '');\n      setResult({ signature });\n    } catch (error) {\n      console.info(error);\n    }\n  }, [web3, account]);\n\n  // eth_sendTransaction\n  const handleSendTx = useCallback(async () => {\n    if (!web3.eth) {\n      setResult({ error: 'Please click connect first' });\n      return;\n    }\n\n    try {\n      const tx = await web3.eth.sendTransaction({\n        to: account,\n        from: account,\n        value: 0.001 * 1e18,\n      });\n      setResult(tx);\n    } catch (error) {\n      console.info(error);\n    }\n  }, [web3, account]);\n\n  // clear connect\n  const handleClear = () => {\n    web3modal.disconnect();\n    setResult({});\n    setWeb3({} as Web3);\n  };\n\n  // re-connect\n  const handleReconnect = async () => {\n    await web3modal.reconnect();\n  };\n\n  return (\n    <div>\n      <div>\n        <div>Extension: {web3modal.cachedProvider}</div>\n        <div className=\"network\">Network: {JSON.stringify(network)}</div>\n        <div className=\"network\">Account: {account}</div>\n        <div className=\"display-panel\">{JSON.stringify(result, null, 2)}</div>\n      </div>\n      <div>\n        <button type=\"button\" onClick={handleClear}>\n          Clear Connect\n        </button>\n        <button type=\"button\" onClick={handleConnect}>\n          Connect\n        </button>\n        <button type=\"button\" onClick={handleReconnect}>\n          ReConnect\n        </button>\n        <button type=\"button\" onClick={handleSign}>\n          Eth_sign\n        </button>\n        <button type=\"button\" onClick={handlePersonalSign}>\n          Personal_sign\n        </button>\n        <button type=\"button\" onClick={handleSendTx}>\n          Eth_sendTransaction\n        </button>\n      </div>\n    </div>\n  );\n};\n","import { Switch, Route } from '@modern-js/runtime/router';\n\nimport { ConnectButtons } from './web3-modal';\nimport './App.css';\n\nconst App = () => (\n  <Switch>\n    <Route exact={true} path=\"/\">\n      <div className=\"container\">\n        <h2 className=\"description\">\n          Web3 Modal Test (\n          <a href=\"https://github.com/robot-ux/web3-modal-example\">Github</a>)\n        </h2>\n        <div className=\"grid\">\n          <ConnectButtons />\n        </div>\n      </div>\n    </Route>\n    <Route path=\"*\">\n      <div>404</div>\n    </Route>\n  </Switch>\n);\n\nexport default App;\n"],"names":["CHAIN_IDS_MAPPING","ConnectButtons","useState","web3modal","setWeb3modal","result","setResult","web3","setWeb3","network","setNetwork","account","setAccount","useEffect","Web3Modal","providerOptions","binancewallet","package","window","BinanceChain","metamask","ethereum","cacheProvider","cachedProvider","handleConnect","useCallback","connect","provider","_web3","Web3","request","method","chainId","setChainId","_chainId","hex","utils","toHex","name","on","Number","eth","getAccounts","accounts","_accounts","handleSign","error","sign","signature","console","info","handlePersonalSign","personal","handleSendTx","sendTransaction","to","from","value","tx","handleReconnect","reconnect","className","JSON","stringify","type","onClick","disconnect","exact","path","href"],"sourceRoot":""}